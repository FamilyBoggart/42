CREADO
-----
las ordenes funcionan con stacks (swap(), rotate(), rev_rotate(), push_a(), push_b())
El programa es capaz de realizar ordenaciones imprimiendo la instruccion que realiza
El algoritmo vacia el stack a hasta tener 3 numeros y te los ordena
El numero ahora posee la propiedad de posicion ideal, comenzando por el 1
Cada elemento del stack B reconoce la posicion a la que debe ir, contando los movimientos y la direccion
El stack b se calcula


EL ALGORITMO FUNCIONA



POR CREAR
---------
Text_instructions debe modificarse o bien para admitir 2 stacks o bien separar las operaciones ss, rr, rrr
Crear funcion para calcular pesos de cada uno de los numeros
Crear funcion para encontrar el minimo peso del stack b
En funcion al metodo anterior, crear la funcion para colocar el nodo b que menos pese en el stack a
Solucionar el problema del 33 (no funciona cada 6 valores)




ALGORITMO
----------
1. Calcula las posiciones ideales de cada numero dentro de la lista enlazada
2. Envia todo salvo 3 numeros al stack_B
3. Ordena los 3 numeros del stack_A
4. El programa calcula para cada elemento del stack B el numero y direccion de los movimientos para enviar al A (sin contar B)
